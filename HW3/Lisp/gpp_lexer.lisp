(defun starts-with (prefix text)
  (let ((prefix-length (length prefix)))
    (and (>= (length text) prefix-length)
         (string= prefix (subseq text 0 prefix-length)))))

(defun is-keyword (input)
  (cond
    ((string= input "and") (format nil "KW_AND"))
    ((string= input "or") (format nil "KW_OR"))
    ((string= input "not") (format nil "KW_NOT"))
    ((string= input "equal") (format nil "KW_EQUAL"))
    ((string= input "less") (format nil "KW_LESS"))
    ((string= input "nil") (format nil "KW_NIL"))
    ((string= input "lst") (format nil "KW_LIST"))
    ((string= input "append") (format nil "KW_APPEND"))
    ((string= input "concat") (format nil "KW_CONCAT"))
    ((string= input "set") (format nil "KW_SET"))
    ((string= input "deffun") (format nil "KW_DEFFUN"))
    ((string= input "for") (format nil "KW_FOR"))
    ((string= input "if") (format nil "KW_IF"))
    ((string= input "exit") (format nil "KW_EXIT"))
    ((string= input "load") (format nil "KW_LOAD"))
    ((string= input "disp") (format nil "KW_DISP"))
    ((string= input "true") (format nil "KW_TRUE"))
    ((string= input "false") (format nil "KW_FALSE"))
    (t nil)))

(defun is-operator (input)
  (cond
    ((string= input "+") "OP_PLUS")
    ((string= input "-") "OP_MINUS")
    ((string= input "*") "OP_MULT")
    ((string= input "/") "OP_DIV")
    ((string= input "(") "OP_OP")
    ((string= input ")") "OP_CP")
    ((string= input ",") "OP_COMMA")
    (t nil)))

(defun is-comment (input)
  (when (starts-with ";;" input)
    "COMMENT"))

(defun is-number (input)
  (when (every #'digit-char-p input)
    "NUMBER"))

(defun categorize-token (input)
  (let ((clean-input (string-trim '(#\Space) input)))
    (or (is-keyword clean-input)
        (is-operator clean-input)
        (is-comment clean-input)
        (is-number clean-input)
        "IDENTIFIER")))

(defun split-text (text)
  (let ((result '())
        (current ""))
    (map 'list
         (lambda (char)
           (cond
             ((member char '(#\Space #\( #\) #\,))
              (when (not (string= current ""))
                (push current result))
              (when (not (char= char #\Space))
                (push (string char) result))
              (setf current ""))
             (t (setf current (concatenate 'string current (string char))))))
         text)
    (when (not (string= current ""))
      (push current result))
    (reverse result)))
